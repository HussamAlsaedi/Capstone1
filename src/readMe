// this Endpoint transferBalance
 // this Endpoint transfer the money from  user to another user
    @GetMapping("/transfer/{fromUserId}/{toUserId}/{amount}")
    public ResponseEntity<ApiResponse> transferBalance(@PathVariable int fromUserId, @PathVariable int toUserId, @PathVariable double amount) {

        int status = userService.transferBalance(fromUserId, toUserId, amount);

        return switch (status) {
            case 1 -> ResponseEntity.status(403).body(new ApiResponse("user send the money not found"));
            case 2 -> ResponseEntity.status(403).body(new ApiResponse("user receive the money not found"));
            case 3 -> ResponseEntity.status(403).body(new ApiResponse("Insufficient balance"));
            default -> ResponseEntity.status(200).body(new ApiResponse("Money transfer completed successfully."));
        };
    }
    public int transferBalance(int fromUserId, int toUserId, double amount) {

        User sender = null;
        User receiver = null;

        for (User user : users) {
            if (user.getId() == fromUserId) {
                sender = user;
            }
            // this code check is sender available
            if (user.getId() == toUserId) {
                receiver = user;
            }
        }

        // this code check is sender = null
        if (sender == null ) {
            return 1;
        }
        // this code check is receiver = null
        if (receiver == null ) {
            return 2;
        }

        // this code check sender's Balance
        if (sender.getBalance() < amount) {
            return 3;
        }

        // this code reduce from sender Balance
        sender.setBalance(sender.getBalance() - amount);

        // this code increase receiver Balance
        receiver.setBalance(receiver.getBalance() + amount);
        return 0;
    }


//------------------------------------------------------------------------------------


 // this Endpoint add productId to Wishlist
    @GetMapping("/addToWishlist/{userId}/{productId}")
    public ResponseEntity<ApiResponse> addToWishlist(@PathVariable int userId, @PathVariable int productId) {

        int status = userService.addToWishlist(userId, productId);

        return switch (status) {
            case 1 -> ResponseEntity.status(403).body(new ApiResponse("user not found"));
            case 2 -> ResponseEntity.status(403).body(new ApiResponse("product not found"));
            default -> ResponseEntity.status(200).body(new ApiResponse("add ToWishlist successfully."));
        };

    }
    public void addToWishlist(int productId) {
        // this code is loop to find productId in List of Products
        for(Product product : productService.getAllProducts()) {
            if (product.getId() == productId) {
                if (!wishlist.contains(product)) {
                    wishlist.add(product);
                }
            }
        }

    }

//------------------------------------------------------------------------------------
// this Endpoint to add To Wishlist
        public int addToWishlist(int userId, int productId) {

        User user1 = null;
        Product product1 = null;

        // this code is loop to find userId in List of users
        for (User user : users) {
            if (user.getId() == userId) {
                user1 = user;
            }
        }

        // this code is loop to find productId in List of Products
        for(Product product : productService.getAllProducts()) {
            if (product.getId() == productId) {
                product1 = product;
            }
        }

        // this code check is user1 = null
        if (user1 == null ) {
            return 1;
        }
        // this code check is product1 = null
        if (product1 == null ) {
            return 2;
        }
        // this code to send productId to addToWishlist
        addToWishlist(productId);


        return 0;
    }
//------------------------------------------------------------------------------------

// Endpoint to get the wishlist

    @GetMapping("/getWishlist")
    public ResponseEntity getWishlist() {
        return ResponseEntity.ok(userService.getWishlist());
    }
 public   ArrayList<Product> getWishlist() {
        return wishlist;
    }

//------------------------------------------------------------------------------------
     // this Endpoint Remove a product from the wishlist

   // Endpoint to remove from Wishlist by productId
    @GetMapping("/remove/{productId}")
    public ResponseEntity<ApiResponse> removeWishlist(@PathVariable int productId) {
        int status = userService.removeWishlist(productId);

        return switch (status) {
            case 1 -> ResponseEntity.status(200).body(new ApiResponse("remove successfully"));
            case 2 -> ResponseEntity.status(403).body(new ApiResponse("productId not found"));
            default -> ResponseEntity.status(403).body(new ApiResponse("Wishlist not removed successfully"));
        };

    }
      public int removeWishlist(int productId) {
          Product product1 = null;

          // this code is loop to find productId in List of Products
          for(Product product : productService.getAllProducts()) {
              if (product.getId() == productId) {
                  product1 = product;
              }
          }
          // this code check is product1 = null
          if (product1 == null ) {
              return 2;
          }

          for (int i = 0; i < wishlist.size() ; i++) {
              if (wishlist.get(i).getId() == productId) {
                  wishlist.remove(i);
                  return 1;
              }
          }
       return 0 ;
     }
//------------------------------------------------------------------------------------
// this Endpoint to getAllLowStock


    @GetMapping("/get-low-stock/{MerchantID}")
    public ResponseEntity getAllLowStock(@PathVariable int MerchantID)
    {
       if (merchantStockService.getAllLowStock(MerchantID).isEmpty()) {
           return ResponseEntity.status(404).body(new ApiResponse("There is no Merchant Stock is low"));
       }
       return ResponseEntity.status(200).body(merchantStockService.getAllLowStock(MerchantID));
    }
 public ArrayList<MerchantStock> getAllLowStock(int merchantID)
    {
        ArrayList<MerchantStock> LowStock = new ArrayList<>();
        for (MerchantStock merchantStock : merchantStocks) {
            if (merchantStock.getMerchantId() == merchantID && merchantStock.getStock() <=10) {
                LowStock.add(merchantStock);
            }
        }
        return LowStock;
    }
